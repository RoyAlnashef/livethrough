# Development Best Practices

> Version: 1.2.0
> Last updated: 2025-03-02
> Scope: Global development standards

## Context

This file is part of the Agent OS standards system. These global best practices are referenced by all product codebases and provide default development guidelines. Individual projects may extend or override these practices in their `.agent-os/product/dev-best-practices.md` file.

## Development Approach

### Think Step-by-Step
- Always describe your plan in pseudocode before implementation
- Break down complex requirements into manageable steps
- Confirm understanding before writing code

### Complete Implementation
- Write fully functional, working code with no TODOs or placeholders
- Ensure all requested functionality is implemented
- Verify code is complete and thoroughly finalized
- Include all required imports and proper component naming

### Quality Standards
- Write correct, best practice, DRY principle code
- Focus on readability over performance optimization
- Be concise and minimize unnecessary prose
- If uncertain about an answer, say so rather than guessing

## Core Principles

### Keep It Simple
- Implement code in the fewest lines possible
- Avoid over-engineering solutions
- Choose straightforward approaches over clever ones

### Optimize for Readability
- Prioritize code clarity over micro-optimizations
- Write self-documenting code with clear variable names
- Add comments for "why" not "what"

### DRY (Don't Repeat Yourself)
- Extract repeated business logic to private methods
- Extract repeated UI markup to reusable components
- Create utility functions for common operations

## Coding Environment

### Supported Technologies
- Python
- ReactJS
- NextJS
- JavaScript
- TypeScript
- TailwindCSS
- HTML
- CSS

## Code Implementation Guidelines

### General Practices (All Languages)
- Use early returns whenever possible to improve readability
- Use descriptive variable and function names
- Define types when possible
- Remove unused imports when components/functions are removed
- Write self-documenting code with clear naming conventions

### Front-End Development (ReactJS, NextJS, JavaScript, TypeScript)

#### Function Declarations
- Use const declarations instead of functions (e.g., `const toggle = () =>`)
- Use arrow functions for component methods and event handlers

#### Event Handling
- Name event functions with "handle" prefix:
  - `handleClick` for onClick
  - `handleKeyDown` for onKeyDown
  - `handleSubmit` for onSubmit

#### Styling
- Always use Tailwind classes for styling HTML elements
- Avoid using CSS or style tags
- Use "class:" instead of ternary operators in class attributes when possible

#### Accessibility
- Implement accessibility features on interactive elements
- Include appropriate attributes:
  - `tabindex="0"` for focusable elements
  - `aria-label` for screen readers
  - `onClick` and `onKeyDown` handlers
  - Other relevant ARIA attributes

### Python Development

#### Function Declarations
- Use descriptive function names with snake_case
- Use type hints when possible
- Prefer list comprehensions over explicit loops when appropriate

#### Code Style
- Follow PEP 8 style guidelines
- Use meaningful variable names
- Implement proper error handling with try/except blocks
- Use context managers for resource management

#### Testing
- Write unit tests for functions and classes
- Use pytest for testing framework
- Include docstrings for public functions and classes

## Dependencies

### Choose Libraries Wisely
When adding third-party dependencies:
- Select the most popular and actively maintained option
- Check the library's GitHub repository for:
  - Recent commits (within last 6 months)
  - Active issue resolution
  - Number of stars/downloads
  - Clear documentation

## Code Organization

### File Structure
- Keep files focused on a single responsibility
- Group related functionality together
- Use consistent naming conventions

### Testing
- Write tests for new functionality
- Maintain existing test coverage
- Test edge cases and error conditions

---

*Customize this file with your team's specific practices. These guidelines apply to all code written by humans and AI agents.*
